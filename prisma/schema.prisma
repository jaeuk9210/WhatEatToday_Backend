// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum WeekDay {
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
  sunday
}

enum Delivery {
  pickup
  delivery
  here
}

enum Category {
  korean
  wastern
  chinese
  japanese
  buffet
  snack
  cafe
  pub
}

model Place {
  id          Int        @id @default(autoincrement())
  name        String
  phoneNumber String?
  address     String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  delivery    Delivery[] @default([here])
  menu        Menu[]
  time        Time[]
}

model Menu {
  id          Int      @id @default(autoincrement())
  picture     String?
  name        String
  price       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  review      Review[]
  placeId     Int
  place       Place    @relation(fields: [placeId], references: [id])
  category    Category
  subCategory String

  @@unique([placeId, name])
}

model Time {
  placeId Int
  place   Place     @relation(fields: [placeId], references: [id])
  weekday WeekDay
  open    DateTime? @db.Timetz()
  close   DateTime? @db.Timetz()

  @@unique([placeId, weekday])
}

model User {
  id        Int       @id @default(autoincrement())
  firstName String?
  lastName  String?
  username  String    @unique
  email     String    @unique
  password  String
  bio       String?
  avatar    String?
  reviews   Review[]
  followers User[]    @relation("FollowRelation")
  following User[]    @relation("FollowRelation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
}

model Verification {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  code      String
  expiredAt DateTime
  verifyed  Boolean  @default(false)
}

model Review {
  id        Int       @id @default(autoincrement())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  menu      Menu      @relation(fields: [menuId], references: [id])
  menuId    Int
  file      String[]
  caption   String?
  hashtags  Hashtag[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  likes     Like[]
  comments  Comment[]
  taste     Int
  cost      Int
  reorder   Int
  clean     Int?
  service   Int?
}

model Hashtag {
  id        Int      @id @default(autoincrement())
  hashtag   String   @unique
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([reviewId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  payload   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  reviewId  Int
}
